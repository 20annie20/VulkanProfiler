import sys
import os.path
import subprocess
import struct

sys.path.append( sys.argv[1] )

# Generated by CMake
from generated import *

if __name__ == '__main__':
    embedded_resources_header_filename = os.path.relpath( EMBEDDED_RESOURCES_HEADER )
    with open( embedded_resources_header_filename, 'w' ) as embedded_resources_file:
        embedded_resources_file.write(
            '#pragma once\n' +
            '#include <stdint.h>\n' +
            '\n' +
            'namespace Profiler\n' +
            '{\n' +
            '    struct ProfilerResources\n' +
            '    {' )
        for resource in RESOURCES:
            resource_name = os.path.splitext( os.path.basename( resource ) )[0]
            embedded_resources_file.write( ('\n' +
                '        inline static const uint8_t {0}[] =\n' +
                '        {{\n').format( resource_name ) )
            with open( resource, 'rb' ) as resource_file:
                resource_bytes = resource_file.read()
            bytes_in_line = 0
            for byte in resource_bytes:
                if bytes_in_line == 0:
                    embedded_resources_file.write( '            ' )
                embedded_resources_file.write( '0x{:02x}, '.format( byte ) )
                bytes_in_line += 1
                if bytes_in_line == 16:
                    bytes_in_line = 0
                    embedded_resources_file.write( '\n' )
            if bytes_in_line > 0:
                embedded_resources_file.write( '\n' )
            embedded_resources_file.write( '        };\n' )
        embedded_resources_file.write(
            '    };\n' +
            '}\n' )
