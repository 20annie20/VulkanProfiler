import sys
import os
import io
import re

sys.path.append( sys.argv[1] )

# Generated by CMake
from generated_files import *


def assert_type( object, type ):
    try: assert isinstance( object, type )
    except AssertionError:
        raise TypeError()


def define_vulkan_structure_traits_struct( vulkan_traits_header_file: io.TextIOBase ):
    vulkan_traits_header_file.write(
        '\n    template<typename StructureType>\n' +
        '    struct VkStructureTypeTraits\n' +
        '    {\n' +
        '        static constexpr bool Defined = false;\n' +
        '    };\n' )


def define_vulkan_structure_trait( vulkan_traits_header_file: io.TextIOBase, structure_name: str, structure_type: str ):
    vulkan_traits_header_file.write( (
        '\n    template<>\n' +
        '    struct VkStructureTypeTraits<{0}>\n' +
        '    {{\n' +
        '        static constexpr bool Defined = true;\n' +
        '        static constexpr VkStructureType Type = {1};\n' +
        '    }};\n' ).format( structure_name, structure_type ) )


def generate_vulkan_structure_traits( vulkan_traits_header_file: io.TextIOBase, vulkan_header_lines: list ):
    vulkan_traits_header_file.write(
        '// Generated file, do not modify\n' +
        '#pragma once\n' +
        '#include <vulkan/vulkan.h>\n' +
        '\n' +
        'namespace Profiler\n' +
        '{' )
    define_vulkan_structure_traits_struct( vulkan_traits_header_file )
    vulkan_structures_found = False
    vulkan_structures_all = False
    vulkan_structures = {}
    vulkan_extension_capitalized_suffixes = ['Khr', 'Ext', 'Int', 'Nv', 'Nvx', 'Amd', 'Ggp']
    re_structure_type_definition = re.compile( r'(?P<type>[\w_]+)\s*=\s*(?P<value>[\w_]+)\s*,' )
    for line in vulkan_header_lines:
        line = line.strip()
        if line.startswith( 'typedef enum VkStructureType' ):
            vulkan_structures_found = True
            continue
        if not vulkan_structures_all and vulkan_structures_found:
            if '}' in line:
                vulkan_structures_all = True # End of definition
            match = re.match( re_structure_type_definition, line )
            if match:
                structure_type = match.group( 'type' )
                if match.group( 'value' ) in vulkan_structures:
                    continue # Alias for already defined structure
                structure_name_components = [component.lower().capitalize() for component in structure_type.split( '_' )]
                if structure_type.startswith( 'VK_STRUCTURE_TYPE_' ):
                    structure_name_components = structure_name_components[3:]
                # Keep extension suffixes uppercase
                if structure_name_components[-1] in vulkan_extension_capitalized_suffixes:
                    structure_name_components[-1] = structure_name_components[-1].upper()
                structure_name = 'Vk' + ''.join( structure_name_components )
                vulkan_structures[structure_name] = structure_type
        if vulkan_structures_all:
            if line.startswith( 'typedef struct' ):
                structure_name = line.split()[2]
                if structure_name in vulkan_structures.keys():
                    define_vulkan_structure_trait( vulkan_traits_header_file, structure_name, vulkan_structures[structure_name] )
    vulkan_traits_header_file.write(
        '}\n' )
    if not vulkan_structures_found:
        raise LookupError( 'Failed to find VkStructureType enum definition' )


if __name__ == '__main__':
    vulkan_include_dir = os.path.normpath( VULKAN_INCLUDE_DIR )
    vulkan_traits_header = os.path.relpath( VULKAN_TRAITS_HEADER )
    # Read vulkan.h
    with open( os.path.join( vulkan_include_dir, 'vulkan', 'vulkan_core.h' ), 'r' ) as vulkan_header_file:
        vulkan_header_lines = vulkan_header_file.readlines()
    # Generate vulkan type traits
    with open( vulkan_traits_header, 'w' ) as vulkan_traits_header_file:
        generate_vulkan_structure_traits( vulkan_traits_header_file, vulkan_header_lines )
