import sys
import os.path
import io
import struct

sys.path.append( sys.argv[1] )

# Generated by CMake
from generated import *

class fourcc:
    DX10 = 0x30315844 # 'DX10' in little-endian
    DXT1 = 0x31545844 # 'DXT1' in little-endian, BC1 unorm
    DXT2 = 0x32545844 # 'DXT2' in little-endian
    DXT3 = 0x33545844 # 'DXT3' in little-endian, BC2 unorm
    DXT4 = 0x34545844 # 'DXT4' in little-endian
    DXT5 = 0x35545844 # 'DXT5' in little-endian, BC3 unorm
    BC4U = 0x55344342 # 'BC4U' in little-endian, BC4 unorm
    BC4S = 0x53344342 # 'BC4S' in little-endian, BC4 snorm
    ATI2 = 0x32495441 # 'ATI2' in little-endian, BC5 unorm
    BC5S = 0x53354342 # 'BC5S' in little-endian, BC5 snorm
    RGBG = 0x47424741 # 'RGBG' in little-endian, R8G8 B8G8 unorm
    GRGB = 0x42475247 # 'GRGB' in little-endian, G8R8 G8B8 unorm
    UYVY = 0x59565955 # 'UYVY' in little-endian
    YUY2 = 0x32595559 # 'YUY2' in little-endian
    R16G16B16A16_UNORM = 36
    R16G16B16A16_SNORM = 110
    R16_FLOAT = 111
    R16G16_FLOAT = 112
    R16G16B16A16_FLOAT = 113
    R32_FLOAT = 114
    R32G32_FLOAT = 115
    R32G32B32A32_FLOAT = 116
    CXV8U8 = 117

class format_:
    def __init__( self, name, value, bitsPerPixel = 0, blockSize = 0 ):
        self.name = name
        self.value = value
        self.bitsPerPixel = bitsPerPixel
        self.blockSize = blockSize

    def __eq__( self, value ):
        if isinstance( value, format_ ):
            return self.value == value.value
        elif isinstance( value, int ):
            return self.value == value
        elif isinstance( value, str ):
            return self.name == value
        return super.__eq__( self, value )

    def __str__( self ):
        return self.name

class dxgi_format:
    UNKNOWN = format_( 'DXGI_FORMAT_UNKNOWN', 0 )
    R32G32B32A32_TYPELESS = format_( 'DXGI_FORMAT_R32G32B32A32_TYPELESS', 1, bitsPerPixel = 128 )
    R32G32B32A32_FLOAT = format_( 'DXGI_FORMAT_R32G32B32A32_FLOAT', 2, bitsPerPixel = 128 )
    R32G32B32A32_UINT = format_( 'DXGI_FORMAT_R32G32B32A32_UINT', 3, bitsPerPixel = 128 )
    R32G32B32A32_SINT = format_( 'DXGI_FORMAT_R32G32B32A32_SINT', 4, bitsPerPixel = 128 )
    R32G32B32_TYPELESS = format_( 'DXGI_FORMAT_R32G32B32_TYPELESS', 5, bitsPerPixel = 96 )
    R32G32B32_FLOAT = format_( 'DXGI_FORMAT_R32G32B32_FLOAT', 6, bitsPerPixel = 96 )
    R32G32B32_UINT = format_( 'DXGI_FORMAT_R32G32B32_UINT', 7, bitsPerPixel = 96 )
    R32G32B32_SINT = format_( 'DXGI_FORMAT_R32G32B32_SINT', 8, bitsPerPixel = 96 )
    R16G16B16A16_TYPELESS = format_( 'DXGI_FORMAT_R16G16B16A16_TYPELESS', 9, bitsPerPixel = 64 )
    R16G16B16A16_FLOAT = format_( 'DXGI_FORMAT_R16G16B16A16_FLOAT', 10, bitsPerPixel = 64 )
    R16G16B16A16_UNORM = format_( 'DXGI_FORMAT_R16G16B16A16_UNORM', 11, bitsPerPixel = 64 )
    R16G16B16A16_UINT = format_( 'DXGI_FORMAT_R16G16B16A16_UINT', 12, bitsPerPixel = 64 )
    R16G16B16A16_SNORM = format_( 'DXGI_FORMAT_R16G16B16A16_SNORM', 13, bitsPerPixel = 64 )
    R16G16B16A16_SINT = format_( 'DXGI_FORMAT_R16G16B16A16_SINT', 14, bitsPerPixel = 64 )
    R32G32_TYPELESS = format_( 'DXGI_FORMAT_R32G32_TYPELESS', 15, bitsPerPixel = 64 )
    R32G32_FLOAT = format_( 'DXGI_FORMAT_R32G32_FLOAT', 16, bitsPerPixel = 64 )
    R32G32_UINT = format_( 'DXGI_FORMAT_R32G32_UINT', 17, bitsPerPixel = 64 )
    R32G32_SINT = format_( 'DXGI_FORMAT_R32G32_SINT', 18, bitsPerPixel = 64 )
    R32G8X24_TYPELESS = format_( 'DXGI_FORMAT_R32G8X24_TYPELESS', 19, bitsPerPixel = 64 )
    D32_FLOAT_S8X24_UINT = format_( 'DXGI_FORMAT_D32_FLOAT_S8X24_UINT', 20, bitsPerPixel = 64 )
    R32_FLOAT_X8X24_TYPELESS = format_( 'DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS', 21, bitsPerPixel = 64 )
    X32_TYPELESS_G8X24_UINT = format_( 'DXGI_FORMAT_X32_TYPELESS_G8X24_UINT', 22, bitsPerPixel = 64 )
    R10G10B10A2_TYPELESS = format_( 'DXGI_FORMAT_R10G10B10A2_TYPELESS', 23, bitsPerPixel = 32 )
    R10G10B10A2_UNORM = format_( 'DXGI_FORMAT_R10G10B10A2_UNORM', 24, bitsPerPixel = 32 )
    R10G10B10A2_UINT = format_( 'DXGI_FORMAT_R10G10B10A2_UINT', 25, bitsPerPixel = 32 )
    R11G11B10_FLOAT = format_( 'DXGI_FORMAT_R11G11B10_FLOAT', 26, bitsPerPixel = 32 )
    R8G8B8A8_TYPELESS = format_( 'DXGI_FORMAT_R8G8B8A8_TYPELESS', 27, bitsPerPixel = 32 )
    R8G8B8A8_UNORM = format_( 'DXGI_FORMAT_R8G8B8A8_UNORM', 28, bitsPerPixel = 32 )
    R8G8B8A8_UNORM_SRGB = format_( 'DXGI_FORMAT_R8G8B8A8_UNORM_SRGB', 29, bitsPerPixel = 32 )
    R8G8B8A8_UINT = format_( 'DXGI_FORMAT_R8G8B8A8_UINT', 30, bitsPerPixel = 32 )
    R8G8B8A8_SNORM = format_( 'DXGI_FORMAT_R8G8B8A8_SNORM', 31, bitsPerPixel = 32 )
    R8G8B8A8_SINT = format_( 'DXGI_FORMAT_R8G8B8A8_SINT', 32, bitsPerPixel = 32 )
    R16G16_TYPELESS = format_( 'DXGI_FORMAT_R16G16_TYPELESS', 33, bitsPerPixel = 32 )
    R16G16_FLOAT = format_( 'DXGI_FORMAT_R16G16_FLOAT', 34, bitsPerPixel = 32 )
    R16G16_UNORM = format_( 'DXGI_FORMAT_R16G16_UNORM', 35, bitsPerPixel = 32 )
    R16G16_UINT = format_( 'DXGI_FORMAT_R16G16_UINT', 36, bitsPerPixel = 32 )
    R16G16_SNORM = format_( 'DXGI_FORMAT_R16G16_SNORM', 37, bitsPerPixel = 32 )
    R16G16_SINT = format_( 'DXGI_FORMAT_R16G16_SINT', 38, bitsPerPixel = 32 )
    R32_TYPELESS = format_( 'DXGI_FORMAT_R32_TYPELESS', 39, bitsPerPixel = 32 )
    D32_FLOAT = format_( 'DXGI_FORMAT_D32_FLOAT', 40, bitsPerPixel = 32 )
    R32_FLOAT = format_( 'DXGI_FORMAT_R32_FLOAT', 41, bitsPerPixel = 32 )
    R32_UINT = format_( 'DXGI_FORMAT_R32_UINT', 42, bitsPerPixel = 32 )
    R32_SINT = format_( 'DXGI_FORMAT_R32_SINT', 43, bitsPerPixel = 32 )
    R24G8_TYPELESS = format_( 'DXGI_FORMAT_R24G8_TYPELESS', 44, bitsPerPixel = 32 )
    D24_UNORM_S8_UINT = format_( 'DXGI_FORMAT_D24_UNORM_S8_UINT', 45, bitsPerPixel = 32 )
    R24_UNORM_X8_TYPELESS = format_( 'DXGI_FORMAT_R24_UNORM_X8_TYPELESS', 46, bitsPerPixel = 32 )
    X24_TYPELESS_G8_UINT = format_( 'DXGI_FORMAT_X24_TYPELESS_G8_UINT', 47, bitsPerPixel = 32 )
    R8G8_TYPELESS = format_( 'DXGI_FORMAT_R8G8_TYPELESS', 48, bitsPerPixel = 16 )
    R8G8_UNORM = format_( 'DXGI_FORMAT_R8G8_UNORM', 49, bitsPerPixel = 16 )
    R8G8_UINT = format_( 'DXGI_FORMAT_R8G8_UINT', 50, bitsPerPixel = 16 )
    R8G8_SNORM = format_( 'DXGI_FORMAT_R8G8_SNORM', 51, bitsPerPixel = 16 )
    R8G8_SINT = format_( 'DXGI_FORMAT_R8G8_SINT', 52, bitsPerPixel = 16 )
    R16_TYPELESS = format_( 'DXGI_FORMAT_R16_TYPELESS', 53, bitsPerPixel = 16 )
    R16_FLOAT = format_( 'DXGI_FORMAT_R16_FLOAT', 54, bitsPerPixel = 16 )
    D16_UNORM = format_( 'DXGI_FORMAT_D16_UNORM', 55, bitsPerPixel = 16 )
    R16_UNORM = format_( 'DXGI_FORMAT_R16_UNORM', 56, bitsPerPixel = 16 )
    R16_UINT = format_( 'DXGI_FORMAT_R16_UINT', 57, bitsPerPixel = 16 )
    R16_SNORM = format_( 'DXGI_FORMAT_R16_SNORM', 58, bitsPerPixel = 16 )
    R16_SINT = format_( 'DXGI_FORMAT_R16_SINT', 59, bitsPerPixel = 16 )
    R8_TYPELESS = format_( 'DXGI_FORMAT_R8_TYPELESS', 60, bitsPerPixel = 8 )
    R8_UNORM = format_( 'DXGI_FORMAT_R8_UNORM', 61, bitsPerPixel = 8 )
    R8_UINT = format_( 'DXGI_FORMAT_R8_UINT', 62, bitsPerPixel = 8 )
    R8_SNORM = format_( 'DXGI_FORMAT_R8_SNORM', 63, bitsPerPixel = 8 )
    R8_SINT = format_( 'DXGI_FORMAT_R8_SINT', 64, bitsPerPixel = 8 )
    A8_UNORM = format_( 'DXGI_FORMAT_A8_UNORM', 65, bitsPerPixel = 8 )
    R1_UNORM = format_( 'DXGI_FORMAT_R1_UNORM', 66, bitsPerPixel = 1 )
    R9G9B9E5_SHAREDEXP = format_( 'DXGI_FORMAT_R9G9B9E5_SHAREDEXP', 67, bitsPerPixel = 32 )
    R8G8_B8G8_UNORM = format_( 'DXGI_FORMAT_R8G8_B8G8_UNORM', 68, bitsPerPixel = 32 )
    G8R8_G8B8_UNORM = format_( 'DXGI_FORMAT_G8R8_G8B8_UNORM', 69, bitsPerPixel = 32 )
    BC1_TYPELESS = format_( 'DXGI_FORMAT_BC1_TYPELESS', 70, blockSize = 8 )
    BC1_UNORM = format_( 'DXGI_FORMAT_BC1_UNORM', 71, blockSize = 8 )
    BC1_UNORM_SRGB = format_( 'DXGI_FORMAT_BC1_UNORM_SRGB', 72, blockSize = 8 )
    BC2_TYPELESS = format_( 'DXGI_FORMAT_BC2_TYPELESS', 73, blockSize = 16 )
    BC2_UNORM = format_( 'DXGI_FORMAT_BC2_UNORM', 74, blockSize = 16 )
    BC2_UNORM_SRGB = format_( 'DXGI_FORMAT_BC2_UNORM_SRGB', 75, blockSize = 16 )
    BC3_TYPELESS = format_( 'DXGI_FORMAT_BC3_TYPELESS', 76, blockSize = 16 )
    BC3_UNORM = format_( 'DXGI_FORMAT_BC3_UNORM', 77, blockSize = 16 )
    BC3_UNORM_SRGB = format_( 'DXGI_FORMAT_BC3_UNORM_SRGB', 78, blockSize = 16 )
    BC4_TYPELESS = format_( 'DXGI_FORMAT_BC4_TYPELESS', 79, blockSize = 8 )
    BC4_UNORM = format_( 'DXGI_FORMAT_BC4_UNORM', 80, blockSize = 8 )
    BC4_SNORM = format_( 'DXGI_FORMAT_BC4_SNORM', 81, blockSize = 8 )
    BC5_TYPELESS = format_( 'DXGI_FORMAT_BC5_TYPELESS', 82, blockSize = 16 )
    BC5_UNORM = format_( 'DXGI_FORMAT_BC5_UNORM', 83, blockSize = 16 )
    BC5_SNORM = format_( 'DXGI_FORMAT_BC5_SNORM', 84, blockSize = 16 )
    B5G6R5_UNORM = format_( 'DXGI_FORMAT_B5G6R5_UNORM', 85, bitsPerPixel = 16 )
    B5G5R5A1_UNORM = format_( 'DXGI_FORMAT_B5G5R5A1_UNORM', 86, bitsPerPixel = 16 )
    B8G8R8A8_UNORM = format_( 'DXGI_FORMAT_B8G8R8A8_UNORM', 87, bitsPerPixel = 32 )
    B8G8R8X8_UNORM = format_( 'DXGI_FORMAT_B8G8R8X8_UNORM', 88, bitsPerPixel = 32 )
    R10G10B10_XR_BIAS_A2_UNORM = format_( 'DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM', 89, bitsPerPixel = 32 )
    B8G8R8A8_TYPELESS = format_( 'DXGI_FORMAT_B8G8R8A8_TYPELESS', 90, bitsPerPixel = 32 )
    B8G8R8A8_UNORM_SRGB = format_( 'DXGI_FORMAT_B8G8R8A8_UNORM_SRGB', 91, bitsPerPixel = 32 )
    B8G8R8X8_TYPELESS = format_( 'DXGI_FORMAT_B8G8R8X8_TYPELESS', 92, bitsPerPixel = 32 )
    B8G8R8X8_UNORM_SRGB = format_( 'DXGI_FORMAT_B8G8R8X8_UNORM_SRGB', 93, bitsPerPixel = 32 )
    BC6H_TYPELESS = format_( 'DXGI_FORMAT_BC6H_TYPELESS', 94, blockSize = 16 )
    BC6H_UF16 = format_( 'DXGI_FORMAT_BC6H_UF16', 95, blockSize = 16 )
    BC6H_SF16 = format_( 'DXGI_FORMAT_BC6H_SF16', 96, blockSize = 16 )
    BC7_TYPELESS = format_( 'DXGI_FORMAT_BC7_TYPELESS', 97, blockSize = 16 )
    BC7_UNORM = format_( 'DXGI_FORMAT_BC7_UNORM', 98, blockSize = 16 )
    BC7_UNORM_SRGB = format_( 'DXGI_FORMAT_BC7_UNORM_SRGB', 99, blockSize = 16 )
    AYUV = format_( 'DXGI_FORMAT_AYUV', 100 )
    Y410 = format_( 'DXGI_FORMAT_Y410', 101 )
    Y416 = format_( 'DXGI_FORMAT_Y416', 102 )
    NV12 = format_( 'DXGI_FORMAT_NV12', 103 )
    P010 = format_( 'DXGI_FORMAT_P010', 104 )
    P016 = format_( 'DXGI_FORMAT_P016', 105 )
    OPAQUE_420 = format_( 'DXGI_FORMAT_420_OPAQUE', 106 )
    YUY2 = format_( 'DXGI_FORMAT_YUY2', 107 )
    Y210 = format_( 'DXGI_FORMAT_Y210', 108 )
    Y216 = format_( 'DXGI_FORMAT_Y216', 109 )
    NV11 = format_( 'DXGI_FORMAT_NV11', 110 )
    AI44 = format_( 'DXGI_FORMAT_AI44', 111 )
    IA44 = format_( 'DXGI_FORMAT_IA44', 112 )
    P8 = format_( 'DXGI_FORMAT_P8', 113 )
    A8P8 = format_( 'DXGI_FORMAT_A8P8', 114 )
    B4G4R4A4_UNORM = format_( 'DXGI_FORMAT_B4G4R4A4_UNORM', 115 )
    P208 = format_( 'DXGI_FORMAT_P208', 116 )
    V208 = format_( 'DXGI_FORMAT_V208', 117 )
    V408 = format_( 'DXGI_FORMAT_V408', 118 )

    @classmethod
    def from_vk_format( format: format_ ) -> format_:
        if format == vk_format.UNDEFINED: return dxgi_format.UNKNOWN
        if format == vk_format.B4G4R4A4_UNORM_PACK16: return dxgi_format.B4G4R4A4_UNORM
        if format == vk_format.B5G6R5_UNORM_PACK16: return dxgi_format.B5G6R5_UNORM
        if format == vk_format.B5G5R5A1_UNORM_PACK16: return dxgi_format.B5G5R5A1_UNORM
        if format == vk_format.R8_UNORM: return dxgi_format.R8_UNORM
        if format == vk_format.R8_SNORM: return dxgi_format.R8_SNORM
        if format == vk_format.R8_UINT: return dxgi_format.R8_UINT
        if format == vk_format.R8_SINT: return dxgi_format.R8_SINT
        if format == vk_format.R8G8_UNORM: return dxgi_format.R8G8_UNORM
        if format == vk_format.R8G8_SNORM: return dxgi_format.R8G8_SNORM
        if format == vk_format.R8G8_UINT: return dxgi_format.R8G8_UINT
        if format == vk_format.R8G8_SINT: return dxgi_format.R8G8_SINT
        if format == vk_format.R8G8B8A8_UNORM: return dxgi_format.R8G8B8A8_UNORM
        if format == vk_format.R8G8B8A8_SRGB: return dxgi_format.R8G8B8A8_UNORM_SRGB
        if format == vk_format.R8G8B8A8_SNORM: return dxgi_format.R8G8B8A8_SNORM
        if format == vk_format.R8G8B8A8_UINT: return dxgi_format.R8G8B8A8_UINT
        if format == vk_format.R8G8B8A8_SINT: return dxgi_format.R8G8B8A8_SINT
        if format == vk_format.B8G8R8A8_UNORM: return dxgi_format.B8G8R8A8_UNORM
        if format == vk_format.B8G8B8A8_SRGB: return dxgi_format.B8G8R8A8_UNORM_SRGB
        if format == vk_format.A2R10G10B10_UNORM_PACK32: return dxgi_format.R10G10B10A2_UNORM
        if format == vk_format.A2R10G10B10_UINT_PACK32: return dxgi_format.R10G10B10A2_UINT
        if format == vk_format.B10G11R11_UFLOAT_PACK32: return dxgi_format.R11G11B10_FLOAT
        if format == vk_format.R16_UNORM: return dxgi_format.R16_UNORM
        if format == vk_format.R16_SNORM: return dxgi_format.R16_SNORM
        if format == vk_format.R16_UINT: return dxgi_format.R16_UINT
        if format == vk_format.R16_SINT: return dxgi_format.R16_SINT
        if format == vk_format.R16_SFLOAT: return dxgi_format.R16_FLOAT
        if format == vk_format.R16G16_UNORM: return dxgi_format.R16G16_UNORM
        if format == vk_format.R16G16_SNORM: return dxgi_format.R16G16_SNORM
        if format == vk_format.R16G16_UINT: return dxgi_format.R16G16_UINT
        if format == vk_format.R16G16_SINT: return dxgi_format.R16G16_SINT
        if format == vk_format.R16G16_SFLOAT: return dxgi_format.R16G16_FLOAT
        if format == vk_format.R16G16B16A16_UNORM: return dxgi_format.R16G16B16A16_UNORM
        if format == vk_format.R16G16B16A16_SNORM: return dxgi_format.R16G16B16A16_SNORM
        if format == vk_format.R16G16B16A16_UINT: return dxgi_format.R16G16B16A16_UINT
        if format == vk_format.R16G16B16A16_SINT: return dxgi_format.R16G16B16A16_SINT
        if format == vk_format.R16G16B16A16_SFLOAT: return dxgi_format.R16G16B16A16_FLOAT
        if format == vk_format.R32_UINT: return dxgi_format.R32_UINT
        if format == vk_format.R32_SINT: return dxgi_format.R32_SINT
        if format == vk_format.R32_SFLOAT: return dxgi_format.R32_FLOAT
        if format == vk_format.R32G32_UINT: return dxgi_format.R32G32_UINT
        if format == vk_format.R32G32_SINT: return dxgi_format.R32G32_SINT
        if format == vk_format.R32G32_SFLOAT: return dxgi_format.R32G32_FLOAT
        if format == vk_format.R32G32B32_UINT: return dxgi_format.R32G32B32_UINT
        if format == vk_format.R32G32B32_SINT: return dxgi_format.R32G32B32_SINT
        if format == vk_format.R32G32B32_SFLOAT: return dxgi_format.R32G32B32_FLOAT
        if format == vk_format.R32G32B32A32_UINT: return dxgi_format.R32G32B32A32_UINT
        if format == vk_format.R32G32B32A32_SINT: return dxgi_format.R32G32B32A32_SINT
        if format == vk_format.R32G32B32A32_SFLOAT: return dxgi_format.R32G32B32A32_FLOAT
        if format == vk_format.E5B9G9R9_UFLOAT_PACK32: return dxgi_format.R9G9B9E5_SHAREDEXP
        if format == vk_format.D16_UNORM: return dxgi_format.D16_UNORM
        if format == vk_format.D32_SFLOAT: return dxgi_format.D32_FLOAT
        if format == vk_format.D24_UNORM_S8_UINT: return dxgi_format.D24_UNORM_S8_UINT
        if format == vk_format.D32_SFLOAT_S8_UINT: return dxgi_format.D32_FLOAT_S8X24_UINT
        if format == vk_format.BC1_RGBA_UNORM_BLOCK: return dxgi_format.BC1_UNORM
        if format == vk_format.BC1_RGBA_SRGB_BLOCK: return dxgi_format.BC1_UNORM_SRGB
        if format == vk_format.BC2_UNORM_BLOCK: return dxgi_format.BC2_UNORM
        if format == vk_format.BC2_SRGB_BLOCK: return dxgi_format.BC2_UNORM_SRGB
        if format == vk_format.BC3_UNORM_BLOCK: return dxgi_format.BC3_UNORM
        if format == vk_format.BC3_SRGB_BLOCK: return dxgi_format.BC3_UNORM_SRGB
        if format == vk_format.BC4_UNORM_BLOCK: return dxgi_format.BC4_UNORM
        if format == vk_format.BC4_SNORM_BLOCK: return dxgi_format.BC4_SNORM
        if format == vk_format.BC5_UNORM_BLOCK: return dxgi_format.BC5_UNORM
        if format == vk_format.BC5_SNORM_BLOCK: return dxgi_format.BC5_SNORM
        if format == vk_format.BC6H_UFLOAT_BLOCK: return dxgi_format.BC6H_UF16
        if format == vk_format.BC6H_SFLOAT_BLOCK: return dxgi_format.BC6H_SF16
        if format == vk_format.BC7_UNORM_BLOCK: return dxgi_format.BC7_UNORM
        if format == vk_format.BC7_SRGB_BLOCK: return dxgi_format.BC7_UNORM_SRGB
        if format == vk_format.G8B8G8R8_422_UNORM: return dxgi_format.R8G8_B8G8_UNORM
        if format == vk_format.B8G8R8G8_422_UNORM: return dxgi_format.G8R8_G8B8_UNORM
        raise ValueError( 'Format not supported' )


class vk_format:
    UNDEFINED = format_( 'VK_FORMAT_UNDEFINED', 0 )
    R4G4_UNORM_PACK8 = format_( 'VK_FORMAT_R4G4_UNORM_PACK8', 1, bitsPerPixel = 8 )
    R4G4B4A4_UNORM_PACK16 = format_( 'VK_FORMAT_R4G4B4A4_UNORM_PACK16', 2, bitsPerPixel = 16 )
    B4G4R4A4_UNORM_PACK16 = format_( 'VK_FORMAT_B4G4R4A4_UNORM_PACK16', 3, bitsPerPixel = 16 )
    R5G6B5_UNORM_PACK16 = format_( 'VK_FORMAT_R5G6B5_UNORM_PACK16', 4, bitsPerPixel = 16 )
    B5G6R5_UNORM_PACK16 = format_( 'VK_FORMAT_B5G6R5_UNORM_PACK16', 5, bitsPerPixel = 16 )
    R5G5B5A1_UNORM_PACK16 = format_( 'VK_FORMAT_R5G5B5A1_UNORM_PACK16', 6, bitsPerPixel = 16 )
    B5G5R5A1_UNORM_PACK16 = format_( 'VK_FORMAT_B5G5R5A1_UNORM_PACK16', 7, bitsPerPixel = 16 )
    A1R5G5B5_UNORM_PACK16 = format_( 'VK_FORMAT_A1R5G5B5_UNORM_PACK16', 8, bitsPerPixel = 16 )
    R8_UNORM = format_( 'VK_FORMAT_R8_UNORM', 9, bitsPerPixel = 8 )
    R8_SNORM = format_( 'VK_FORMAT_R8_SNORM', 10, bitsPerPixel = 8 )
    R8_USCALED = format_( 'VK_FORMAT_R8_USCALED', 11, bitsPerPixel = 8 )
    R8_SSCALED = format_( 'VK_FORMAT_R8_SSCALED', 12, bitsPerPixel = 8 )
    R8_UINT = format_( 'VK_FORMAT_R8_UINT', 13, bitsPerPixel = 8 )
    R8_SINT = format_( 'VK_FORMAT_R8_SINT', 14, bitsPerPixel = 8 )
    R8_SRGB = format_( 'VK_FORMAT_R8_SRGB', 15, bitsPerPixel = 8 )
    R8G8_UNORM = format_( 'VK_FORMAT_R8G8_UNORM', 16, bitsPerPixel = 16 )
    R8G8_SNORM = format_( 'VK_FORMAT_R8G8_SNORM', 17, bitsPerPixel = 16 )
    R8G8_USCALED = format_( 'VK_FORMAT_R8G8_USCALED', 18, bitsPerPixel = 16 )     
    R8G8_SSCALED = format_( 'VK_FORMAT_R8G8_SSCALED', 19, bitsPerPixel = 16 )     
    R8G8_UINT = format_( 'VK_FORMAT_R8G8_UINT', 20, bitsPerPixel = 16 )        
    R8G8_SINT = format_( 'VK_FORMAT_R8G8_SINT', 21, bitsPerPixel = 16 )        
    R8G8_SRGB = format_( 'VK_FORMAT_R8G8_SRGB', 22, bitsPerPixel = 16 )        
    R8G8B8_UNORM = format_( 'VK_FORMAT_R8G8B8_UNORM', 23, bitsPerPixel = 24 )     
    R8G8B8_SNORM = format_( 'VK_FORMAT_R8G8B8_SNORM', 24, bitsPerPixel = 24 )     
    R8G8B8_USCALED = format_( 'VK_FORMAT_R8G8B8_USCALED', 25, bitsPerPixel = 24 )   
    R8G8B8_SSCALED = format_( 'VK_FORMAT_R8G8B8_SSCALED', 26, bitsPerPixel = 24 )   
    R8G8B8_UINT = format_( 'VK_FORMAT_R8G8B8_UINT', 27, bitsPerPixel = 24 )      
    R8G8B8_SINT = format_( 'VK_FORMAT_R8G8B8_SINT', 28, bitsPerPixel = 24 )      
    R8G8B8_SRGB = format_( 'VK_FORMAT_R8G8B8_SRGB', 29, bitsPerPixel = 24 )      
    B8G8R8_UNORM = format_( 'VK_FORMAT_B8G8R8_UNORM', 30, bitsPerPixel = 24 )    
    B8G8R8_SNORM = format_( 'VK_FORMAT_B8G8R8_SNORM', 31, bitsPerPixel = 24 )     
    B8G8R8_USCALED = format_( 'VK_FORMAT_B8G8R8_USCALED', 32, bitsPerPixel = 24 )   
    B8G8R8_SSCALED = format_( 'VK_FORMAT_B8G8R8_SSCALED', 33, bitsPerPixel = 24 )   
    B8G8R8_UINT = format_( 'VK_FORMAT_B8G8R8_UINT', 34, bitsPerPixel = 24 )     
    B8G8R8_SINT = format_( 'VK_FORMAT_B8G8R8_SINT', 35, bitsPerPixel = 24 )      
    B8G8R8_SRGB = format_( 'VK_FORMAT_B8G8R8_SRGB', 36, bitsPerPixel = 24 )      
    R8G8B8A8_UNORM = format_( 'VK_FORMAT_R8G8B8A8_UNORM', 37, bitsPerPixel = 32 )   
    R8G8B8A8_SNORM = format_( 'VK_FORMAT_R8G8B8A8_SNORM', 38, bitsPerPixel = 32 )   
    R8G8B8A8_USCALED = format_( 'VK_FORMAT_R8G8B8A8_USCALED', 39, bitsPerPixel = 32 ) 
    R8G8B8A8_SSCALED = format_( 'VK_FORMAT_R8G8B8A8_SSCALED', 40, bitsPerPixel = 32 ) 
    R8G8B8A8_UINT = format_( 'VK_FORMAT_R8G8B8A8_UINT', 41, bitsPerPixel = 32 )    
    R8G8B8A8_SINT = format_( 'VK_FORMAT_R8G8B8A8_SINT', 42, bitsPerPixel = 32 )    
    R8G8B8A8_SRGB = format_( 'VK_FORMAT_R8G8B8A8_SRGB', 43, bitsPerPixel = 32 )    
    B8G8R8A8_UNORM = format_( 'VK_FORMAT_B8G8R8A8_UNORM', 44, bitsPerPixel = 32 )   
    B8G8R8A8_SNORM = format_( 'VK_FORMAT_B8G8R8A8_SNORM', 45, bitsPerPixel = 32 )   
    B8G8R8A8_USCALED = format_( 'VK_FORMAT_B8G8R8A8_USCALED', 46, bitsPerPixel = 32 ) 
    B8G8R8A8_SSCALED = format_( 'VK_FORMAT_B8G8R8A8_SSCALED', 47, bitsPerPixel = 32 ) 
    B8G8R8A8_UINT = format_( 'VK_FORMAT_B8G8R8A8_UINT', 48, bitsPerPixel = 32 )    
    B8G8R8A8_SINT = format_( 'VK_FORMAT_B8G8R8A8_SINT', 49, bitsPerPixel = 32 )    
    B8G8R8A8_SRGB = format_( 'VK_FORMAT_B8G8R8A8_SRGB', 50, bitsPerPixel = 32 )    
    A8B8G8R8_UNORM_PACK32 = format_( 'VK_FORMAT_A8B8G8R8_UNORM_PACK32', 51, bitsPerPixel = 32 )
    A8B8G8R8_SNORM_PACK32 = format_( 'VK_FORMAT_A8B8G8R8_SNORM_PACK32', 52, bitsPerPixel = 32 )
    A8B8G8R8_USCALED_PACK32 = format_( 'VK_FORMAT_A8B8G8R8_USCALED_PACK32', 53, bitsPerPixel = 32 )
    A8B8G8R8_SSCALED_PACK32 = format_( 'VK_FORMAT_A8B8G8R8_SSCALED_PACK32', 54, bitsPerPixel = 32 )
    A8B8G8R8_UINT_PACK32 = format_( 'VK_FORMAT_A8B8G8R8_UINT_PACK32', 55, bitsPerPixel = 32 )
    A8B8G8R8_SINT_PACK32 = format_( 'VK_FORMAT_A8B8G8R8_SINT_PACK32', 56, bitsPerPixel = 32 )
    A8B8G8R8_SRGB_PACK32 = format_( 'VK_FORMAT_A8B8G8R8_SRGB_PACK32', 57, bitsPerPixel = 32 )
    A2R10G10B10_UNORM_PACK32 = format_( 'VK_FORMAT_A2R10G10B10_UNORM_PACK32', 58, bitsPerPixel = 32 )
    A2R10G10B10_SNORM_PACK32 = format_( 'VK_FORMAT_A2R10G10B10_SNORM_PACK32', 59, bitsPerPixel = 32 )
    A2R10G10B10_USCALED_PACK32 = format_( 'VK_FORMAT_A2R10G10B10_USCALED_PACK32', 60, bitsPerPixel = 32 )
    A2R10G10B10_SSCALED_PACK32 = format_( 'VK_FORMAT_A2R10G10B10_SSCALED_PACK32', 61, bitsPerPixel = 32 )
    A2R10G10B10_UINT_PACK32 = format_( 'VK_FORMAT_A2R10G10B10_UINT_PACK32', 62, bitsPerPixel = 32 )
    A2R10G10B10_SINT_PACK32 = format_( 'VK_FORMAT_A2R10G10B10_SINT_PACK32', 63, bitsPerPixel = 32 )
    A2B10G10R10_UNORM_PACK32 = format_( 'VK_FORMAT_A2B10G10R10_UNORM_PACK32', 64, bitsPerPixel = 32 )
    A2B10G10R10_SNORM_PACK32 = format_( 'VK_FORMAT_A2B10G10R10_SNORM_PACK32', 65, bitsPerPixel = 32 )
    A2B10G10R10_USCALED_PACK32 = format_( 'VK_FORMAT_A2B10G10R10_USCALED_PACK32', 66, bitsPerPixel = 32 )
    A2B10G10R10_SSCALED_PACK32 = format_( 'VK_FORMAT_A2B10G10R10_SSCALED_PACK32', 67, bitsPerPixel = 32 )
    A2B10G10R10_UINT_PACK32 = format_( 'VK_FORMAT_A2B10G10R10_UINT_PACK32', 68, bitsPerPixel = 32 )
    A2B10G10R10_SINT_PACK32 = format_( 'VK_FORMAT_A2B10G10R10_SINT_PACK32', 69, bitsPerPixel = 32 )
    R16_UNORM = format_( 'VK_FORMAT_R16_UNORM', 70, bitsPerPixel = 16 )
    R16_SNORM = format_( 'VK_FORMAT_R16_SNORM', 71, bitsPerPixel = 16 )
    R16_USCALED = format_( 'VK_FORMAT_R16_USCALED', 72, bitsPerPixel = 16 )
    R16_SSCALED = format_( 'VK_FORMAT_R16_SSCALED', 73, bitsPerPixel = 16 )
    R16_UINT = format_( 'VK_FORMAT_R16_UINT', 74, bitsPerPixel = 16 )
    R16_SINT = format_( 'VK_FORMAT_R16_SINT', 75, bitsPerPixel = 16 )
    R16_SFLOAT = format_( 'VK_FORMAT_R16_SFLOAT', 76, bitsPerPixel = 16 )
    R16G16_UNORM = format_( 'VK_FORMAT_R16G16_UNORM', 77, bitsPerPixel = 32 )
    R16G16_SNORM = format_( 'VK_FORMAT_R16G16_SNORM', 78, bitsPerPixel = 32 )
    R16G16_USCALED = format_( 'VK_FORMAT_R16G16_USCALED', 79, bitsPerPixel = 32 )
    R16G16_SSCALED = format_( 'VK_FORMAT_R16G16_SSCALED', 80, bitsPerPixel = 32 )
    R16G16_UINT = format_( 'VK_FORMAT_R16G16_UINT', 81, bitsPerPixel = 32 )
    R16G16_SINT = format_( 'VK_FORMAT_R16G16_SINT', 82, bitsPerPixel = 32 )
    R16G16_SFLOAT = format_( 'VK_FORMAT_R16G16_SFLOAT', 83, bitsPerPixel = 32 )
    R16G16B16_UNORM = format_( 'VK_FORMAT_R16G16B16_UNORM', 84, bitsPerPixel = 48 )
    R16G16B16_SNORM = format_( 'VK_FORMAT_R16G16B16_SNORM', 85, bitsPerPixel = 48 )
    R16G16B16_USCALED = format_( 'VK_FORMAT_R16G16B16_USCALED', 86, bitsPerPixel = 48 )
    R16G16B16_SSCALED = format_( 'VK_FORMAT_R16G16B16_SSCALED', 87, bitsPerPixel = 48 )
    R16G16B16_UINT = format_( 'VK_FORMAT_R16G16B16_UINT', 88, bitsPerPixel = 48 )
    R16G16B16_SINT = format_( 'VK_FORMAT_R16G16B16_SINT', 89, bitsPerPixel = 48 )
    R16G16B16_SFLOAT = format_( 'VK_FORMAT_R16G16B16_SFLOAT', 90, bitsPerPixel = 48 )
    R16G16B16A16_UNORM = format_( 'VK_FORMAT_R16G16B16A16_UNORM', 91, bitsPerPixel = 64 )
    R16G16B16A16_SNORM = format_( 'VK_FORMAT_R16G16B16A16_SNORM', 92, bitsPerPixel = 64 )
    R16G16B16A16_USCALED = format_( 'VK_FORMAT_R16G16B16A16_USCALED', 93, bitsPerPixel = 64 )
    R16G16B16A16_SSCALED = format_( 'VK_FORMAT_R16G16B16A16_SSCALED', 94, bitsPerPixel = 64 )
    R16G16B16A16_UINT = format_( 'VK_FORMAT_R16G16B16A16_UINT', 95, bitsPerPixel = 64 )
    R16G16B16A16_SINT = format_( 'VK_FORMAT_R16G16B16A16_SINT', 96, bitsPerPixel = 64 )
    R16G16B16A16_SFLOAT = format_( 'VK_FORMAT_R16G16B16A16_SFLOAT', 97, bitsPerPixel = 64 )
    R32_UINT = format_( 'VK_FORMAT_R32_UINT', 98, bitsPerPixel = 32 )
    R32_SINT = format_( 'VK_FORMAT_R32_SINT', 99, bitsPerPixel = 32 )
    R32_SFLOAT = format_( 'VK_FORMAT_R32_SFLOAT', 100, bitsPerPixel = 32 )
    R32G32_UINT = format_( 'VK_FORMAT_R32G32_UINT', 101, bitsPerPixel = 64 )
    R32G32_SINT = format_( 'VK_FORMAT_R32G32_SINT', 102, bitsPerPixel = 64 )
    R32G32_SFLOAT = format_( 'VK_FORMAT_R32G32_SFLOAT', 103, bitsPerPixel = 64 )
    R32G32B32_UINT = format_( 'VK_FORMAT_R32G32B32_UINT', 104, bitsPerPixel = 96 )
    R32G32B32_SINT = format_( 'VK_FORMAT_R32G32B32_SINT', 105, bitsPerPixel = 96 )
    R32G32B32_SFLOAT = format_( 'VK_FORMAT_R32G32B32_SFLOAT', 106, bitsPerPixel = 96 )
    R32G32B32A32_UINT = format_( 'VK_FORMAT_R32G32B32A32_UINT', 107, bitsPerPixel = 128 )
    R32G32B32A32_SINT = format_( 'VK_FORMAT_R32G32B32A32_SINT', 108, bitsPerPixel = 128 )
    R32G32B32A32_SFLOAT = format_( 'VK_FORMAT_R32G32B32A32_SFLOAT', 109, bitsPerPixel = 128 )
    R64_UINT = format_( 'VK_FORMAT_R64_UINT', 110, bitsPerPixel = 64 )
    R64_SINT = format_( 'VK_FORMAT_R64_SINT', 111, bitsPerPixel = 64 )
    R64_SFLOAT = format_( 'VK_FORMAT_R64_SFLOAT', 112, bitsPerPixel = 64 )
    R64G64_UINT = format_( 'VK_FORMAT_R64G64_UINT', 113, bitsPerPixel = 128 )
    R64G64_SINT = format_( 'VK_FORMAT_R64G64_SINT', 114, bitsPerPixel = 128 )
    R64G64_SFLOAT = format_( 'VK_FORMAT_R64G64_SFLOAT', 115, bitsPerPixel = 128 )
    R64G64B64_UINT = format_( 'VK_FORMAT_R64G64B64_UINT', 116, bitsPerPixel = 192 )
    R64G64B64_SINT = format_( 'VK_FORMAT_R64G64B64_SINT', 117, bitsPerPixel = 192 )
    R64G64B64_SFLOAT = format_( 'VK_FORMAT_R64G64B64_SFLOAT', 118, bitsPerPixel = 192 )
    R64G64B64A64_UINT = format_( 'VK_FORMAT_R64G64B64A64_UINT', 119, bitsPerPixel = 256 )
    R64G64B64A64_SINT = format_( 'VK_FORMAT_R64G64B64A64_SINT', 120, bitsPerPixel = 256 )
    R64G64B64A64_SFLOAT = format_( 'VK_FORMAT_R64G64B64A64_SFLOAT', 121, bitsPerPixel = 256 )
    B10G11R11_UFLOAT_PACK32 = format_( 'VK_FORMAT_B10G11R11_UFLOAT_PACK32', 122, bitsPerPixel = 32 )
    E5B9G9R9_UFLOAT_PACK32 = format_( 'VK_FORMAT_E5B9G9R9_UFLOAT_PACK32', 123, bitsPerPixel = 32 )
    D16_UNORM = format_( 'VK_FORMAT_D16_UNORM', 124, bitsPerPixel = 16 )
    X8_D24_UNORM_PACK32 = format_( 'VK_FORMAT_X8_D24_UNORM_PACK32', 125, bitsPerPixel = 32 )
    D32_SFLOAT = format_( 'VK_FORMAT_D32_SFLOAT', 126, bitsPerPixel = 32 )
    S8_UINT = format_( 'VK_FORMAT_S8_UINT', 127, bitsPerPixel = 8 )
    D16_UNORM_S8_UINT = format_( 'VK_FORMAT_D16_UNORM_S8_UINT', 128, bitsPerPixel = 24 )
    D24_UNORM_S8_UINT = format_( 'VK_FORMAT_D24_UNORM_S8_UINT', 129, bitsPerPixel = 32 )
    D32_SFLOAT_S8_UINT = format_( 'VK_FORMAT_D32_SFLOAT_S8_UINT', 130, bitsPerPixel = 40 )
    BC1_RGB_UNORM_BLOCK = format_( 'VK_FORMAT_BC1_RGB_UNORM_BLOCK', 131, blockSize = 8 )
    BC1_RGB_SRGB_BLOCK = format_( 'VK_FORMAT_BC1_RGB_SRGB_BLOCK', 132, blockSize = 8 )
    BC1_RGBA_UNORM_BLOCK = format_( 'VK_FORMAT_BC1_RGBA_UNORM_BLOCK', 133, blockSize = 8 )
    BC1_RGBA_SRGB_BLOCK = format_( 'VK_FORMAT_BC1_RGBA_SRGB_BLOCK', 134, blockSize = 8 )
    BC2_UNORM_BLOCK = format_( 'VK_FORMAT_BC2_UNORM_BLOCK', 135, blockSize = 16 )
    BC2_SRGB_BLOCK = format_( 'VK_FORMAT_BC2_SRGB_BLOCK', 136, blockSize = 16 )
    BC3_UNORM_BLOCK = format_( 'VK_FORMAT_BC3_UNORM_BLOCK', 137, blockSize = 16 )
    BC3_SRGB_BLOCK = format_( 'VK_FORMAT_BC3_SRGB_BLOCK', 138, blockSize = 16 )
    BC4_UNORM_BLOCK = format_( 'VK_FORMAT_BC4_UNORM_BLOCK', 139, blockSize = 8 )
    BC4_SNORM_BLOCK = format_( 'VK_FORMAT_BC4_SNORM_BLOCK', 140, blockSize = 8 )
    BC5_UNORM_BLOCK = format_( 'VK_FORMAT_BC5_UNORM_BLOCK', 141, blockSize = 16 )
    BC5_SNORM_BLOCK = format_( 'VK_FORMAT_BC5_SNORM_BLOCK', 142, blockSize = 16 )
    BC6H_UFLOAT_BLOCK = format_( 'VK_FORMAT_BC6H_UFLOAT_BLOCK', 143, blockSize = 16 )
    BC6H_SFLOAT_BLOCK = format_( 'VK_FORMAT_BC6H_SFLOAT_BLOCK', 144, blockSize = 16 )
    BC7_UNORM_BLOCK = format_( 'VK_FORMAT_BC7_UNORM_BLOCK', 145, blockSize = 16 )
    BC7_SRGB_BLOCK = format_( 'VK_FORMAT_BC7_SRGB_BLOCK', 146, blockSize = 16 )
    ETC2_R8G8B8_UNORM_BLOCK = format_( 'VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK', 147 )
    ETC2_R8G8B8_SRGB_BLOCK = format_( 'VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK', 148 )
    ETC2_R8G8B8A1_UNORM_BLOCK = format_( 'VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK', 149 )
    ETC2_R8G8B8A1_SRGB_BLOCK = format_( 'VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK', 150 )
    ETC2_R8G8B8A8_UNORM_BLOCK = format_( 'VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK', 151 )
    ETC2_R8G8B8A8_SRGB_BLOCK = format_( 'VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK', 152 )
    EAC_R11_UNORM_BLOCK = format_( 'VK_FORMAT_EAC_R11_UNORM_BLOCK', 153 )
    EAC_R11_SNORM_BLOCK = format_( 'VK_FORMAT_EAC_R11_SNORM_BLOCK', 154 )
    EAC_R11G11_UNORM_BLOCK = format_( 'VK_FORMAT_EAC_R11G11_UNORM_BLOCK', 155 )
    EAC_R11G11_SNORM_BLOCK = format_( 'VK_FORMAT_EAC_R11G11_SNORM_BLOCK', 156 )
    ASTC_4x4_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_4x4_UNORM_BLOCK', 157 )
    ASTC_4x4_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_4x4_SRGB_BLOCK', 158 )
    ASTC_5x4_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_5x4_UNORM_BLOCK', 159 )
    ASTC_5x4_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_5x4_SRGB_BLOCK', 160 )
    ASTC_5x5_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_5x5_UNORM_BLOCK', 161 )
    ASTC_5x5_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_5x5_SRGB_BLOCK', 162 )
    ASTC_6x5_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_6x5_UNORM_BLOCK', 163 )
    ASTC_6x5_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_6x5_SRGB_BLOCK', 164 )
    ASTC_6x6_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_6x6_UNORM_BLOCK', 165 )
    ASTC_6x6_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_6x6_SRGB_BLOCK', 166 )
    ASTC_8x5_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_8x5_UNORM_BLOCK', 167 )
    ASTC_8x5_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_8x5_SRGB_BLOCK', 168 )
    ASTC_8x6_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_8x6_UNORM_BLOCK', 169 )
    ASTC_8x6_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_8x6_SRGB_BLOCK', 170 )
    ASTC_8x8_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_8x8_UNORM_BLOCK', 171 )
    ASTC_8x8_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_8x8_SRGB_BLOCK', 172 )
    ASTC_10x5_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_10x5_UNORM_BLOCK', 173 )
    ASTC_10x5_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_10x5_SRGB_BLOCK', 174 )
    ASTC_10x6_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_10x6_UNORM_BLOCK', 175 )
    ASTC_10x6_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_10x6_SRGB_BLOCK', 176 )
    ASTC_10x8_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_10x8_UNORM_BLOCK', 177 )
    ASTC_10x8_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_10x8_SRGB_BLOCK', 178 )
    ASTC_10x10_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_10x10_UNORM_BLOCK', 179 )
    ASTC_10x10_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_10x10_SRGB_BLOCK', 180 )
    ASTC_12x10_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_12x10_UNORM_BLOCK', 181 )
    ASTC_12x10_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_12x10_SRGB_BLOCK', 182 )
    ASTC_12x12_UNORM_BLOCK = format_( 'VK_FORMAT_ASTC_12x12_UNORM_BLOCK', 183 )
    ASTC_12x12_SRGB_BLOCK = format_( 'VK_FORMAT_ASTC_12x12_SRGB_BLOCK', 184 )
    G8B8G8R8_422_UNORM = format_( 'VK_FORMAT_G8B8G8R8_422_UNORM', 1000156000, bitsPerPixel = 32 )
    B8G8R8G8_422_UNORM = format_( 'VK_FORMAT_B8G8R8G8_422_UNORM', 1000156001, bitsPerPixel = 32 )
    G8_B8_R8_3PLANE_420_UNORM = format_( 'VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM', 1000156002 )
    G8_B8R8_2PLANE_420_UNORM = format_( 'VK_FORMAT_G8_B8R8_2PLANE_420_UNORM', 1000156003 )
    G8_B8_R8_3PLANE_422_UNORM = format_( 'VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM', 1000156004 )
    G8_B8R8_2PLANE_422_UNORM = format_( 'VK_FORMAT_G8_B8R8_2PLANE_422_UNORM', 1000156005 )
    G8_B8_R8_3PLANE_444_UNORM = format_( 'VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM', 1000156006 )
    R10X6_UNORM_PACK16 = format_( 'VK_FORMAT_R10X6_UNORM_PACK16', 1000156007, bitsPerPixel = 16 )
    R10X6G10X6_UNORM_2PACK16 = format_( 'VK_FORMAT_R10X6G10X6_UNORM_2PACK16', 1000156008, bitsPerPixel = 32 )
    R10X6G10X6B10X6A10X6_UNORM_4PACK16 = format_( 'VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16', 1000156009, bitsPerPixel = 64 )
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = format_( 'VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16', 1000156010, bitsPerPixel = 64 )
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = format_( 'VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16', 1000156011, bitsPerPixel = 64 )
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = format_( 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16', 1000156012, bitsPerPixel = 48 )
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = format_( 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16', 1000156013, bitsPerPixel = 48 )
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = format_( 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16', 1000156014, bitsPerPixel = 48 )
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = format_( 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16', 1000156015, bitsPerPixel = 48 )
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = format_( 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16', 1000156016, bitsPerPixel = 48 )
    R12X4_UNORM_PACK16 = format_( 'VK_FORMAT_R12X4_UNORM_PACK16', 1000156017, bitsPerPixel = 16 )
    R12X4G12X4_UNORM_2PACK16 = format_( 'VK_FORMAT_R12X4G12X4_UNORM_2PACK16', 1000156018, bitsPerPixel = 32 )
    R12X4G12X4B12X4A12X4_UNORM_4PACK16 = format_( 'VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16', 1000156019, bitsPerPixel = 64 )
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = format_( 'VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16', 1000156020, bitsPerPixel = 64 )
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = format_( 'VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16', 1000156021, bitsPerPixel = 64 )
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = format_( 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16', 1000156022, bitsPerPixel = 48 )
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = format_( 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16', 1000156023, bitsPerPixel = 48 )
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = format_( 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16', 1000156024, bitsPerPixel = 48 )
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = format_( 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16', 1000156025, bitsPerPixel = 48 )
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = format_( 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16', 1000156026, bitsPerPixel = 48 )
    G16B16G16R16_422_UNORM = format_( 'VK_FORMAT_G16B16G16R16_422_UNORM', 1000156027, bitsPerPixel = 64 )
    B16G16R16G16_422_UNORM = format_( 'VK_FORMAT_B16G16R16G16_422_UNORM', 1000156028, bitsPerPixel = 64 )
    G16_B16_R16_3PLANE_420_UNORM = format_( 'VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM', 1000156029 )
    G16_B16R16_2PLANE_420_UNORM = format_( 'VK_FORMAT_G16_B16R16_2PLANE_420_UNORM', 1000156030 )
    G16_B16_R16_3PLANE_422_UNORM = format_( 'VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM', 1000156031 )
    G16_B16R16_2PLANE_422_UNORM = format_( 'VK_FORMAT_G16_B16R16_2PLANE_422_UNORM', 1000156032 )
    G16_B16_R16_3PLANE_444_UNORM = format_( 'VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM', 1000156033 )
    PVRTC1_2BPP_UNORM_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG', 1000054000 )
    PVRTC1_4BPP_UNORM_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG', 1000054001 )
    PVRTC2_2BPP_UNORM_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG', 1000054002 )
    PVRTC2_4BPP_UNORM_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG', 1000054003 )
    PVRTC1_2BPP_SRGB_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG', 1000054004 )
    PVRTC1_4BPP_SRGB_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG', 1000054005 )
    PVRTC2_2BPP_SRGB_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG', 1000054006 )
    PVRTC2_4BPP_SRGB_BLOCK_IMG = format_( 'VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG', 1000054007 )
    ASTC_4x4_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT', 1000066000 )
    ASTC_5x4_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT', 1000066001 )
    ASTC_5x5_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT', 1000066002 )
    ASTC_6x5_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT', 1000066003 )
    ASTC_6x6_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT', 1000066004 )
    ASTC_8x5_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT', 1000066005 )
    ASTC_8x6_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT', 1000066006 )
    ASTC_8x8_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT', 1000066007 )
    ASTC_10x5_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT', 1000066008 )
    ASTC_10x6_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT', 1000066009 )
    ASTC_10x8_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT', 1000066010 )
    ASTC_10x10_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT', 1000066011 )
    ASTC_12x10_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT', 1000066012 )
    ASTC_12x12_SFLOAT_BLOCK_EXT = format_( 'VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT', 1000066013 )
    G8B8G8R8_422_UNORM_KHR = G8B8G8R8_422_UNORM
    B8G8R8G8_422_UNORM_KHR = B8G8R8G8_422_UNORM
    G8_B8_R8_3PLANE_420_UNORM_KHR = G8_B8_R8_3PLANE_420_UNORM
    G8_B8R8_2PLANE_420_UNORM_KHR = G8_B8R8_2PLANE_420_UNORM
    G8_B8_R8_3PLANE_422_UNORM_KHR = G8_B8_R8_3PLANE_422_UNORM
    G8_B8R8_2PLANE_422_UNORM_KHR = G8_B8R8_2PLANE_422_UNORM
    G8_B8_R8_3PLANE_444_UNORM_KHR = G8_B8_R8_3PLANE_444_UNORM
    R10X6_UNORM_PACK16_KHR = R10X6_UNORM_PACK16
    R10X6G10X6_UNORM_2PACK16_KHR = R10X6G10X6_UNORM_2PACK16
    R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = R10X6G10X6B10X6A10X6_UNORM_4PACK16
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
    R12X4_UNORM_PACK16_KHR = R12X4_UNORM_PACK16
    R12X4G12X4_UNORM_2PACK16_KHR = R12X4G12X4_UNORM_2PACK16
    R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = R12X4G12X4B12X4A12X4_UNORM_4PACK16
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
    G16B16G16R16_422_UNORM_KHR = G16B16G16R16_422_UNORM
    B16G16R16G16_422_UNORM_KHR = B16G16R16G16_422_UNORM
    G16_B16_R16_3PLANE_420_UNORM_KHR = G16_B16_R16_3PLANE_420_UNORM
    G16_B16R16_2PLANE_420_UNORM_KHR = G16_B16R16_2PLANE_420_UNORM
    G16_B16_R16_3PLANE_422_UNORM_KHR = G16_B16_R16_3PLANE_422_UNORM
    G16_B16R16_2PLANE_422_UNORM_KHR = G16_B16R16_2PLANE_422_UNORM
    G16_B16_R16_3PLANE_444_UNORM_KHR = G16_B16_R16_3PLANE_444_UNORM

    BlockCompressedFormats = [
        BC1_RGB_UNORM_BLOCK,
        BC1_RGB_SRGB_BLOCK,
        BC1_RGBA_UNORM_BLOCK,
        BC1_RGBA_SRGB_BLOCK,
        BC2_UNORM_BLOCK,
        BC2_SRGB_BLOCK,
        BC3_UNORM_BLOCK,
        BC3_SRGB_BLOCK,
        BC4_UNORM_BLOCK,
        BC4_SNORM_BLOCK,
        BC5_UNORM_BLOCK,
        BC5_SNORM_BLOCK,
        BC6H_UFLOAT_BLOCK,
        BC6H_SFLOAT_BLOCK,
        BC7_UNORM_BLOCK,
        BC7_SRGB_BLOCK,
        ETC2_R8G8B8_UNORM_BLOCK,
        ETC2_R8G8B8_SRGB_BLOCK,
        ETC2_R8G8B8A1_UNORM_BLOCK,
        ETC2_R8G8B8A1_SRGB_BLOCK,
        ETC2_R8G8B8A8_UNORM_BLOCK,
        ETC2_R8G8B8A8_SRGB_BLOCK,
        EAC_R11_UNORM_BLOCK,
        EAC_R11_SNORM_BLOCK,
        EAC_R11G11_UNORM_BLOCK,
        EAC_R11G11_SNORM_BLOCK,
        ASTC_4x4_UNORM_BLOCK,
        ASTC_4x4_SRGB_BLOCK, 
        ASTC_5x4_UNORM_BLOCK,
        ASTC_5x4_SRGB_BLOCK, 
        ASTC_5x5_UNORM_BLOCK,
        ASTC_5x5_SRGB_BLOCK, 
        ASTC_6x5_UNORM_BLOCK,
        ASTC_6x5_SRGB_BLOCK, 
        ASTC_6x6_UNORM_BLOCK,
        ASTC_6x6_SRGB_BLOCK,
        ASTC_8x5_UNORM_BLOCK,
        ASTC_8x5_SRGB_BLOCK, 
        ASTC_8x6_UNORM_BLOCK,
        ASTC_8x6_SRGB_BLOCK, 
        ASTC_8x8_UNORM_BLOCK,
        ASTC_8x8_SRGB_BLOCK,
        ASTC_10x5_UNORM_BLOCK,
        ASTC_10x5_SRGB_BLOCK,
        ASTC_10x6_UNORM_BLOCK,
        ASTC_10x6_SRGB_BLOCK,
        ASTC_10x8_UNORM_BLOCK,
        ASTC_10x8_SRGB_BLOCK, 
        ASTC_10x10_UNORM_BLOCK,
        ASTC_10x10_SRGB_BLOCK,
        ASTC_12x10_UNORM_BLOCK,
        ASTC_12x10_SRGB_BLOCK,
        ASTC_12x12_UNORM_BLOCK,
        ASTC_12x12_SRGB_BLOCK,
        PVRTC1_2BPP_UNORM_BLOCK_IMG,
        PVRTC1_4BPP_UNORM_BLOCK_IMG,
        PVRTC2_2BPP_UNORM_BLOCK_IMG,
        PVRTC2_4BPP_UNORM_BLOCK_IMG,
        PVRTC1_2BPP_SRGB_BLOCK_IMG,
        PVRTC1_4BPP_SRGB_BLOCK_IMG,
        PVRTC2_2BPP_SRGB_BLOCK_IMG,
        PVRTC2_4BPP_SRGB_BLOCK_IMG,
        ASTC_4x4_SFLOAT_BLOCK_EXT, 
        ASTC_5x4_SFLOAT_BLOCK_EXT, 
        ASTC_5x5_SFLOAT_BLOCK_EXT, 
        ASTC_6x5_SFLOAT_BLOCK_EXT, 
        ASTC_6x6_SFLOAT_BLOCK_EXT, 
        ASTC_8x5_SFLOAT_BLOCK_EXT, 
        ASTC_8x6_SFLOAT_BLOCK_EXT, 
        ASTC_8x8_SFLOAT_BLOCK_EXT, 
        ASTC_10x5_SFLOAT_BLOCK_EXT,
        ASTC_10x6_SFLOAT_BLOCK_EXT,
        ASTC_10x8_SFLOAT_BLOCK_EXT,
        ASTC_10x10_SFLOAT_BLOCK_EXT,
        ASTC_12x10_SFLOAT_BLOCK_EXT,
        ASTC_12x12_SFLOAT_BLOCK_EXT]

    @classmethod
    def from_dxgi_format( format: format_ ) -> format_:
        if format == dxgi_format.UNKNOWN: return vk_format.UNDEFINED
        if format == dxgi_format.R32G32B32A32_TYPELESS: return vk_format.R32G32B32A32_UINT
        if format == dxgi_format.R32G32B32A32_FLOAT: return vk_format.R32G32B32A32_SFLOAT
        if format == dxgi_format.R32G32B32A32_UINT: return vk_format.R32G32B32A32_UINT
        if format == dxgi_format.R32G32B32A32_SINT: return vk_format.R32G32B32A32_SINT
        if format == dxgi_format.R32G32B32_TYPELESS: return vk_format.R32G32B32_UINT
        if format == dxgi_format.R32G32B32_FLOAT: return vk_format.R32G32B32_SFLOAT
        if format == dxgi_format.R32G32B32_UINT: return vk_format.R32G32B32_UINT
        if format == dxgi_format.R32G32B32_SINT: return vk_format.R32G32B32_SINT
        #if format == dxgi_format.R16G16B16A16_TYPELESS = format_( 'DXGI_FORMAT_R16G16B16A16_TYPELESS', 9 )
        #if format == dxgi_format.R16G16B16A16_FLOAT = format_( 'DXGI_FORMAT_R16G16B16A16_FLOAT', 10 )
        #if format == dxgi_format.R16G16B16A16_UNORM = format_( 'DXGI_FORMAT_R16G16B16A16_UNORM', 11 )
        #if format == dxgi_format.R16G16B16A16_UINT = format_( 'DXGI_FORMAT_R16G16B16A16_UINT', 12 )
        #if format == dxgi_format.R16G16B16A16_SNORM = format_( 'DXGI_FORMAT_R16G16B16A16_SNORM', 13 )
        #if format == dxgi_format.R16G16B16A16_SINT = format_( 'DXGI_FORMAT_R16G16B16A16_SINT', 14 )
        #if format == dxgi_format.R32G32_TYPELESS = format_( 'DXGI_FORMAT_R32G32_TYPELESS', 15 )
        #if format == dxgi_format.R32G32_FLOAT = format_( 'DXGI_FORMAT_R32G32_FLOAT', 16 )
        #if format == dxgi_format.R32G32_UINT = format_( 'DXGI_FORMAT_R32G32_UINT', 17 )
        #if format == dxgi_format.R32G32_SINT = format_( 'DXGI_FORMAT_R32G32_SINT', 18 )
        #if format == dxgi_format.R32G8X24_TYPELESS = format_( 'DXGI_FORMAT_R32G8X24_TYPELESS', 19 )
        #if format == dxgi_format.D32_FLOAT_S8X24_UINT = format_( 'DXGI_FORMAT_D32_FLOAT_S8X24_UINT', 20 )
        #if format == dxgi_format.R32_FLOAT_X8X24_TYPELESS = format_( 'DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS', 21 )
        #if format == dxgi_format.X32_TYPELESS_G8X24_UINT = format_( 'DXGI_FORMAT_X32_TYPELESS_G8X24_UINT', 22 )
        #if format == dxgi_format.R10G10B10A2_TYPELESS = format_( 'DXGI_FORMAT_R10G10B10A2_TYPELESS', 23 )
        #if format == dxgi_format.R10G10B10A2_UNORM = format_( 'DXGI_FORMAT_R10G10B10A2_UNORM', 24 )
        #if format == dxgi_format.R10G10B10A2_UINT = format_( 'DXGI_FORMAT_R10G10B10A2_UINT', 25 )
        #if format == dxgi_format.R11G11B10_FLOAT = format_( 'DXGI_FORMAT_R11G11B10_FLOAT', 26 )
        #if format == dxgi_format.R8G8B8A8_TYPELESS = format_( 'DXGI_FORMAT_R8G8B8A8_TYPELESS', 27 )
        #if format == dxgi_format.R8G8B8A8_UNORM = format_( 'DXGI_FORMAT_R8G8B8A8_UNORM', 28 )
        #if format == dxgi_format.R8G8B8A8_UNORM_SRGB = format_( 'DXGI_FORMAT_R8G8B8A8_UNORM_SRGB', 29 )
        #if format == dxgi_format.R8G8B8A8_UINT = format_( 'DXGI_FORMAT_R8G8B8A8_UINT', 30 )
        #if format == dxgi_format.R8G8B8A8_SNORM = format_( 'DXGI_FORMAT_R8G8B8A8_SNORM', 31 )
        #if format == dxgi_format.R8G8B8A8_SINT = format_( 'DXGI_FORMAT_R8G8B8A8_SINT', 32 )
        #if format == dxgi_format.R16G16_TYPELESS = format_( 'DXGI_FORMAT_R16G16_TYPELESS', 33 )
        #if format == dxgi_format.R16G16_FLOAT = format_( 'DXGI_FORMAT_R16G16_FLOAT', 34 )
        #if format == dxgi_format.R16G16_UNORM = format_( 'DXGI_FORMAT_R16G16_UNORM', 35 )
        #if format == dxgi_format.R16G16_UINT = format_( 'DXGI_FORMAT_R16G16_UINT', 36 )
        #if format == dxgi_format.R16G16_SNORM = format_( 'DXGI_FORMAT_R16G16_SNORM', 37 )
        #if format == dxgi_format.R16G16_SINT = format_( 'DXGI_FORMAT_R16G16_SINT', 38 )
        #if format == dxgi_format.R32_TYPELESS = format_( 'DXGI_FORMAT_R32_TYPELESS', 39 )
        #if format == dxgi_format.D32_FLOAT = format_( 'DXGI_FORMAT_D32_FLOAT', 40 )
        #if format == dxgi_format.R32_FLOAT = format_( 'DXGI_FORMAT_R32_FLOAT', 41 )
        #if format == dxgi_format.R32_UINT = format_( 'DXGI_FORMAT_R32_UINT', 42 )
        #if format == dxgi_format.R32_SINT = format_( 'DXGI_FORMAT_R32_SINT', 43 )
        #if format == dxgi_format.R24G8_TYPELESS = format_( 'DXGI_FORMAT_R24G8_TYPELESS', 44 )
        #if format == dxgi_format.D24_UNORM_S8_UINT = format_( 'DXGI_FORMAT_D24_UNORM_S8_UINT', 45 )
        #if format == dxgi_format.R24_UNORM_X8_TYPELESS = format_( 'DXGI_FORMAT_R24_UNORM_X8_TYPELESS', 46 )
        #if format == dxgi_format.X24_TYPELESS_G8_UINT = format_( 'DXGI_FORMAT_X24_TYPELESS_G8_UINT', 47 )
        #if format == dxgi_format.R8G8_TYPELESS = format_( 'DXGI_FORMAT_R8G8_TYPELESS', 48 )
        #if format == dxgi_format.R8G8_UNORM = format_( 'DXGI_FORMAT_R8G8_UNORM', 49 )
        #if format == dxgi_format.R8G8_UINT = format_( 'DXGI_FORMAT_R8G8_UINT', 50 )
        #if format == dxgi_format.R8G8_SNORM = format_( 'DXGI_FORMAT_R8G8_SNORM', 51 )
        #if format == dxgi_format.R8G8_SINT = format_( 'DXGI_FORMAT_R8G8_SINT', 52 )
        #if format == dxgi_format.R16_TYPELESS = format_( 'DXGI_FORMAT_R16_TYPELESS', 53 )
        #if format == dxgi_format.R16_FLOAT = format_( 'DXGI_FORMAT_R16_FLOAT', 54 )
        #if format == dxgi_format.D16_UNORM = format_( 'DXGI_FORMAT_D16_UNORM', 55 )
        #if format == dxgi_format.R16_UNORM = format_( 'DXGI_FORMAT_R16_UNORM', 56 )
        #if format == dxgi_format.R16_UINT = format_( 'DXGI_FORMAT_R16_UINT', 57 )
        #if format == dxgi_format.R16_SNORM = format_( 'DXGI_FORMAT_R16_SNORM', 58 )
        #if format == dxgi_format.R16_SINT = format_( 'DXGI_FORMAT_R16_SINT', 59 )
        #if format == dxgi_format.R8_TYPELESS = format_( 'DXGI_FORMAT_R8_TYPELESS', 60 )
        #if format == dxgi_format.R8_UNORM = format_( 'DXGI_FORMAT_R8_UNORM', 61 )
        #if format == dxgi_format.R8_UINT = format_( 'DXGI_FORMAT_R8_UINT', 62 )
        #if format == dxgi_format.R8_SNORM = format_( 'DXGI_FORMAT_R8_SNORM', 63 )
        #if format == dxgi_format.R8_SINT = format_( 'DXGI_FORMAT_R8_SINT', 64 )
        #if format == dxgi_format.A8_UNORM = format_( 'DXGI_FORMAT_A8_UNORM', 65 )
        #if format == dxgi_format.R1_UNORM = format_( 'DXGI_FORMAT_R1_UNORM', 66 )
        #if format == dxgi_format.R9G9B9E5_SHAREDEXP = format_( 'DXGI_FORMAT_R9G9B9E5_SHAREDEXP', 67 )
        #if format == dxgi_format.R8G8_B8G8_UNORM = format_( 'DXGI_FORMAT_R8G8_B8G8_UNORM', 68 )
        #if format == dxgi_format.G8R8_G8B8_UNORM = format_( 'DXGI_FORMAT_G8R8_G8B8_UNORM', 69 )
        #if format == dxgi_format.BC1_TYPELESS = format_( 'DXGI_FORMAT_BC1_TYPELESS', 70 )
        #if format == dxgi_format.BC1_UNORM = format_( 'DXGI_FORMAT_BC1_UNORM', 71 )
        #if format == dxgi_format.BC1_UNORM_SRGB = format_( 'DXGI_FORMAT_BC1_UNORM_SRGB', 72 )
        #if format == dxgi_format.BC2_TYPELESS = format_( 'DXGI_FORMAT_BC2_TYPELESS', 73 )
        #if format == dxgi_format.BC2_UNORM = format_( 'DXGI_FORMAT_BC2_UNORM', 74 )
        #if format == dxgi_format.BC2_UNORM_SRGB = format_( 'DXGI_FORMAT_BC2_UNORM_SRGB', 75 )
        #if format == dxgi_format.BC3_TYPELESS = format_( 'DXGI_FORMAT_BC3_TYPELESS', 76 )
        #if format == dxgi_format.BC3_UNORM = format_( 'DXGI_FORMAT_BC3_UNORM', 77 )
        #if format == dxgi_format.BC3_UNORM_SRGB = format_( 'DXGI_FORMAT_BC3_UNORM_SRGB', 78 )
        #if format == dxgi_format.BC4_TYPELESS = format_( 'DXGI_FORMAT_BC4_TYPELESS', 79 )
        #if format == dxgi_format.BC4_UNORM = format_( 'DXGI_FORMAT_BC4_UNORM', 80 )
        #if format == dxgi_format.BC4_SNORM = format_( 'DXGI_FORMAT_BC4_SNORM', 81 )
        #if format == dxgi_format.BC5_TYPELESS = format_( 'DXGI_FORMAT_BC5_TYPELESS', 82 )
        #if format == dxgi_format.BC5_UNORM = format_( 'DXGI_FORMAT_BC5_UNORM', 83 )
        #if format == dxgi_format.BC5_SNORM = format_( 'DXGI_FORMAT_BC5_SNORM', 84 )
        #if format == dxgi_format.B5G6R5_UNORM = format_( 'DXGI_FORMAT_B5G6R5_UNORM', 85 )
        #if format == dxgi_format.B5G5R5A1_UNORM = format_( 'DXGI_FORMAT_B5G5R5A1_UNORM', 86 )
        #if format == dxgi_format.B8G8R8A8_UNORM = format_( 'DXGI_FORMAT_B8G8R8A8_UNORM', 87 )
        #if format == dxgi_format.B8G8R8X8_UNORM = format_( 'DXGI_FORMAT_B8G8R8X8_UNORM', 88 )
        #if format == dxgi_format.R10G10B10_XR_BIAS_A2_UNORM = format_( 'DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM', 89 )
        #if format == dxgi_format.B8G8R8A8_TYPELESS = format_( 'DXGI_FORMAT_B8G8R8A8_TYPELESS', 90 )
        #if format == dxgi_format.B8G8R8A8_UNORM_SRGB = format_( 'DXGI_FORMAT_B8G8R8A8_UNORM_SRGB', 91 )
        #if format == dxgi_format.B8G8R8X8_TYPELESS = format_( 'DXGI_FORMAT_B8G8R8X8_TYPELESS', 92 )
        #if format == dxgi_format.B8G8R8X8_UNORM_SRGB = format_( 'DXGI_FORMAT_B8G8R8X8_UNORM_SRGB', 93 )
        #if format == dxgi_format.BC6H_TYPELESS = format_( 'DXGI_FORMAT_BC6H_TYPELESS', 94 )
        #if format == dxgi_format.BC6H_UF16 = format_( 'DXGI_FORMAT_BC6H_UF16', 95 )
        #if format == dxgi_format.BC6H_SF16 = format_( 'DXGI_FORMAT_BC6H_SF16', 96 )
        #if format == dxgi_format.BC7_TYPELESS = format_( 'DXGI_FORMAT_BC7_TYPELESS', 97 )
        #if format == dxgi_format.BC7_UNORM = format_( 'DXGI_FORMAT_BC7_UNORM', 98 )
        #if format == dxgi_format.BC7_UNORM_SRGB = format_( 'DXGI_FORMAT_BC7_UNORM_SRGB', 99 )
        #if format == dxgi_format.AYUV = format_( 'DXGI_FORMAT_AYUV', 100 )
        #if format == dxgi_format.Y410 = format_( 'DXGI_FORMAT_Y410', 101 )
        #if format == dxgi_format.Y416 = format_( 'DXGI_FORMAT_Y416', 102 )
        #if format == dxgi_format.NV12 = format_( 'DXGI_FORMAT_NV12', 103 )
        #if format == dxgi_format.P010 = format_( 'DXGI_FORMAT_P010', 104 )
        #if format == dxgi_format.P016 = format_( 'DXGI_FORMAT_P016', 105 )
        #if format == dxgi_format.OPAQUE_420 = format_( 'DXGI_FORMAT_420_OPAQUE', 106 )
        #if format == dxgi_format.YUY2 = format_( 'DXGI_FORMAT_YUY2', 107 )
        #if format == dxgi_format.Y210 = format_( 'DXGI_FORMAT_Y210', 108 )
        #if format == dxgi_format.Y216 = format_( 'DXGI_FORMAT_Y216', 109 )
        #if format == dxgi_format.NV11 = format_( 'DXGI_FORMAT_NV11', 110 )
        #if format == dxgi_format.AI44 = format_( 'DXGI_FORMAT_AI44', 111 )
        #if format == dxgi_format.IA44 = format_( 'DXGI_FORMAT_IA44', 112 )
        #if format == dxgi_format.P8 = format_( 'DXGI_FORMAT_P8', 113 )
        #if format == dxgi_format.A8P8 = format_( 'DXGI_FORMAT_A8P8', 114 )
        #if format == dxgi_format.B4G4R4A4_UNORM = format_( 'DXGI_FORMAT_B4G4R4A4_UNORM', 115 )
        #if format == dxgi_format.P208 = format_( 'DXGI_FORMAT_P208', 116 )
        #if format == dxgi_format.V208 = format_( 'DXGI_FORMAT_V208', 117 )
        #if format == dxgi_format.V408 = format_( 'DXGI_FORMAT_V408', 118 )
        raise ValueError( 'Format not supported' )


class dds_pixelformat_flags:
    ALPHAPIXELS = 0x1
    ALPHA = 0x2
    FOURCC = 0x4
    RGB = 0x40
    YUV = 0x200
    LUMINANCE = 0x20000

class d3d10_resource_dimension:
    TEXTURE1D = 2
    TEXTURE2D = 3
    TEXTURE3D = 4

class dds_pixelformat:
    def __init__( self, header_fields: tuple = None ):
        self.size = 0
        self.flags = 0
        self.fourCC = 0
        self.rgbBitCount = 0
        self.rBitMask = 0
        self.gBitMask = 0
        self.bBitMask = 0
        self.aBitMask = 0
        if header_fields is not None:
            self.unpack( header_fields )

    def unpack( self, header_fields: tuple ):
        self.size = header_fields[18]
        if self.size != 32:
            raise ValueError( 'Invalid DDS pixelformat header size' )
        self.flags = header_fields[19]
        self.fourCC = header_fields[20]
        self.rgbBitCount = header_fields[21]
        self.rBitMask = header_fields[22]
        self.gBitMask = header_fields[23]
        self.bBitMask = header_fields[24]
        self.aBitMask = header_fields[25]

class dds_header:
    def __init__( self, data: bytes = None ):
        self.size = 0
        self.flags = 0
        self.height = 0
        self.width = 0
        self.pitchOrLinearSize = 0
        self.depth = 0
        self.mipMapCount = 0
        self.pixelFormat = dds_pixelformat()
        self.caps = 0
        self.caps2 = 0
        self.caps3 = 0
        self.caps4 = 0
        if data is not None:
            self.unpack( data )

    def unpack( self, data: bytes ):
        header_fields = struct.unpack( 'IIIIIIIIIIIIIIIIIIIIIIIIIIIIIII', data )
        self.size = header_fields[0]
        if self.size != 124:
            raise ValueError( 'Invalid DDS header size ({0})'.format( self.size ) )
        self.flags = header_fields[1]
        self.height = header_fields[2]
        self.width = header_fields[3]
        self.pitchOrLinearSize = header_fields[4]
        self.depth = header_fields[5]
        self.mipMapCount = header_fields[6]
        self.pixelFormat.unpack( header_fields )
        self.caps = header_fields[26]
        self.caps2 = header_fields[27]
        self.caps3 = header_fields[28]
        self.caps4 = header_fields[29]

class dds_header10:
    def __init__( self, data: bytes = None ):
        self.dxgiFormat = 0
        self.resourceDimension = 0
        self.miscFlags = 0
        self.arraySize = 0
        self.alphaMode = 0
        if data is not None:
            self.unpack( data )

    def unpack( self, data: bytes ):
        header_fields = struct.unpack( 'IIIII', data )
        self.dxgiFormat = header_fields[0]
        self.resourceDimension = header_fields[1]
        self.miscFlags = header_fields[2]
        self.arraySize = header_fields[3]
        self.alphaMode = header_fields[4]

class unified_header( dds_header, dds_header10 ):

    def __init__( self ):
        self.mipSizes = []
        self.format = vk_format.UNDEFINED

    def setHeaderFields( self, header: dds_header ):
        self.size = header.size
        self.flags = header.flags
        self.height = header.height
        self.width = header.width
        self.pitchOrLinearSize = header.pitchOrLinearSize
        self.depth = header.depth
        self.mipMapCount = header.mipMapCount
        self.pixelFormat = header.pixelFormat 
        self.caps = header.caps
        self.caps2 = header.caps2
        self.caps3 = header.caps3
        self.caps4 = header.caps4
        self.computeHeaderFields10()
        self.computeFormat()
        self.computeMipSizes()

    def setHeaderFields10( self, header10: dds_header10 ):
        self.dxgiFormat = header10.dxgiFormat
        self.resourceDimension = header10.resourceDimension
        self.miscFlags = header10.miscFlags
        self.arraySize = header10.arraySize
        self.alphaMode = header10.alphaMode
        self.computeFormat()
        self.computeMipSizes()

    def computeHeaderFields10( self ):
        self.arraySize = 1
        self.miscFlags = 0
        self.resourceDimension = d3d10_resource_dimension.TEXTURE3D
        if self.depth == 0 or self.depth == 1:
            self.resourceDimension = d3d10_resource_dimension.TEXTURE2D
            if self.height == 0 or self.height == 1:
                self.resourceDimension = d3d10_resource_dimension.TEXTURE1D

    def computeFormat( self ):
        if (self.pixelFormat.flags & dds_pixelformat_flags.FOURCC) > 0:
            if self.pixelFormat.fourCC == fourcc.DX10:
                self.format = vk_format.from_dxgi_format( self.dxgiFormat )
            elif self.pixelFormat.fourCC == fourcc.DXT1:
                self.format = vk_format.BC1_RGBA_UNORM_BLOCK
            elif self.pixelFormat.fourCC == fourcc.DXT2 or \
                 self.pixelFormat.fourCC == fourcc.DXT3:
                self.format = vk_format.BC2_UNORM_BLOCK
            elif self.pixelFormat.fourCC == fourcc.DXT4 or \
                 self.pixelFormat.fourCC == fourcc.DXT5:
                self.format = vk_format.BC3_UNORM_BLOCK
            elif self.pixelFormat.fourCC == fourcc.BC4U:
                self.format = vk_format.BC4_UNORM_BLOCK
            elif self.pixelFormat.fourCC == fourcc.BC4S:
                self.format = vk_format.BC4_SNORM_BLOCK
            elif self.pixelFormat.fourCC == fourcc.ATI2:
                self.format = vk_format.BC5_UNORM_BLOCK
            elif self.pixelFormat.fourCC == fourcc.BC5S:
                self.format = vk_format.BC5_SNORM_BLOCK
            elif self.pixelFormat.fourCC == fourcc.RGBG:
                self.format = vk_format.G8B8G8R8_422_UNORM
            elif self.pixelFormat.fourCC == fourcc.GRGB:
                self.format = vk_format.B8G8R8G8_422_UNORM
            elif self.pixelFormat.fourCC == fourcc.R16G16B16A16_UNORM:
                self.format = vk_format.R16G16B16A16_UNORM
            elif self.pixelFormat.fourCC == fourcc.R16G16B16A16_SNORM:
                self.format = vk_format.R16G16B16A16_SNORM
            elif self.pixelFormat.fourCC == fourcc.R16_FLOAT:
                self.format = vk_format.R16_SFLOAT
            elif self.pixelFormat.fourCC == fourcc.R16G16_FLOAT:
                self.format = vk_format.R16G16_SFLOAT
            elif self.pixelFormat.fourCC == fourcc.R16G16B16A16_FLOAT:
                self.format = vk_format.R16G16B16A16_SFLOAT
            elif self.pixelFormat.fourCC == fourcc.R32_FLOAT:
                self.format = vk_format.R32_SFLOAT
            elif self.pixelFormat.fourCC == fourcc.R32G32_FLOAT:
                self.format = vk_format.R32G32_SFLOAT
            elif self.pixelFormat.fourCC == fourcc.R32G32B32A32_FLOAT:
                self.format = vk_format.R32G32B32A32_SFLOAT
            else:
                raise ValueError( 'Format not supported' )
        else:
            r = self.pixelFormat.rBitMask
            g = self.pixelFormat.gBitMask
            b = self.pixelFormat.bBitMask
            a = self.pixelFormat.aBitMask
            bits = self.pixelFormat.rgbBitCount
            if (self.pixelFormat.flags & dds_pixelformat_flags.ALPHA) > 0:
                raise ValueError( 'Format not supported' )
            if (self.pixelFormat.flags & dds_pixelformat_flags.RGB) > 0:
                if (self.pixelFormat.flags & dds_pixelformat_flags.ALPHAPIXELS) > 0:
                    if bits == 32 and r == 0xff and g == 0xff00 and b == 0xff0000 and a == 0xff000000:
                        self.format = vk_format.R8G8B8A8_UNORM
                    elif bits == 32 and r == 0x3ff and g == 0xffc00 and b == 0x3ff00000 and a == 0xc0000000:
                        self.format = vk_format.A2R10G10B10_UNORM_PACK32
                    elif bits == 16 and r == 0x7c00 and g == 0x3e0 and b == 0x1f and a == 0x8000:
                        self.format = vk_format.A1R5G5B5_UNORM_PACK16
                    else:
                        raise ValueError( 'Format not supported' )
                else:
                    if bits == 32 and r == 0xffff and g == 0xffff0000:
                        self.format = vk_format.R16G16_UNORM
                    elif bits == 16 and r == 0xf800 and g == 0x7e0 and b == 0x1f:
                        self.format = vk_format.R5G6B5_UNORM_PACK16
                    else:
                        raise ValueError( 'Format not supported' )
            
    def computeMipSizes( self ):
        self.mipSizes = []
        for i in range( self.mipMapCount ):
            width = max( 1, self.width >> i )
            height = max( 1, self.height >> i )
            depth = max( 1, self.depth >> i )
            if (self.pixelFormat.flags & dds_pixelformat_flags.FOURCC) > 0:
                if self.format in vk_format.BlockCompressedFormats:
                    self.mipSizes.append( max( 1, depth * ((height + 3) // 4 ) * ((width + 3) // 4) * self.format.blockSize ) )
                    continue
                else:
                    if self.pixelFormat.fourCC == fourcc.RGBG or \
                       self.pixelFormat.fourCC == fourcc.GRGB or \
                       self.pixelFormat.fourCC == fourcc.UYVY or \
                       self.pixelFormat.fourCC == fourcc.YUY2:
                        self.mipSizes.append( depth * height * ((width + 1) >> 1) * 4 )
                        continue
            self.mipSizes.append( (depth * height * width * self.format.bitsPerPixel + 7) // 8 )


INDENTATION = 0

def write( file: io.TextIOBase, line: str ):
    global INDENTATION
    if '}' in line and '{' not in line: INDENTATION -= 1
    file.write( ('    ' * INDENTATION) + line )
    if '{' in line and '}' not in line: INDENTATION += 1

def embed_resource_dds( file: io.RawIOBase, resource: str ):
    global INDENTATION
    resource_name = os.path.splitext( os.path.basename( resource ) )[0]
    with open( resource, 'rb' ) as resource_file:
        resource_bytes = resource_file.read()
    magic = struct.unpack( 'I', resource_bytes[:4] )[0]
    if magic != 0x20534444:
        raise ValueError( 'Invalid DDS signature' )
    header = unified_header()
    header.setHeaderFields( dds_header( resource_bytes[4:128] ) )
    data_offset = 128
    if header.pixelFormat.fourCC == fourcc.DX10:
        header.setHeaderFields10( dds_header10( resource_bytes[128:148] ) )
        data_offset = 148
    data = resource_bytes[data_offset:]
    write( file, 'struct {0}\n'.format( resource_name ) )
    write( file, '{\n' )
    write( file, 'inline static const uint32_t width = {0};\n'.format( header.width ) )
    write( file, 'inline static const uint32_t height = {0};\n'.format( header.height ) )
    write( file, 'inline static const uint32_t depth = {0};\n'.format( header.depth ) )
    write( file, 'inline static const VkFormat format = {0};\n'.format( header.format ) )
    write( file, 'inline static const uint32_t arraySize = {0};\n'.format( header.arraySize ) )
    write( file, 'inline static const uint32_t arraySliceSize = {0};\n'.format( sum( header.mipSizes ) ) )
    write( file, 'inline static const uint32_t mipCount = {0};\n'.format( header.mipMapCount ) )
    write( file, 'inline static const uint32_t mipSizes[] = {{ {0} }};\n'.format( ', '.join( map( str, header.mipSizes ) ) ) )
    write( file, 'inline static const uint8_t data[] =\n' )
    write( file, '{\n' )
    bytes_in_line = 0
    for byte in data:
        if bytes_in_line == 0:
            write( file, '' ) #indent
        file.write( '0x{:02x}, '.format( byte ) )
        bytes_in_line += 1
        if bytes_in_line == 16:
            bytes_in_line = 0
            file.write( '\n' )
    if bytes_in_line > 0:
        file.write( '\n' )
    write( file, '};\n' )
    write( file, '};\n\n' )


if __name__ == '__main__':
    embedded_resources_header_filename = os.path.relpath( EMBEDDED_RESOURCES_HEADER )
    with open( embedded_resources_header_filename, 'w' ) as h:
        h.write(
            '#pragma once\n' +
            '#include <stdint.h>\n' +
            '#include <vector>\n' +
            '#include <vulkan/vulkan.h>\n\n' +
            'namespace Profiler\n' +
            '{\n' )
        INDENTATION = 1
        for resource in RESOURCES:
            resource_ext = os.path.splitext( resource )[1]
            if resource_ext == '.dds':
                embed_resource_dds( h, resource )
        h.write( '}\n' )
